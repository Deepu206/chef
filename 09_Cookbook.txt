There are a lot of entities that we work within Chef, some playing on the cooking theme, and others using technology focused jargon,
but the fundamental unit of configuration that we use is a cookbook. In this lesson, we’ll investigate what goes into a cookbook and
we’ll create our first one.

Documentation:
Chef cookbook documentation (https://docs.chef.io/cookbooks.html)
Berkshelf documentation (https://docs.chef.io/berkshelf.html)
delivery documentation (https://docs.chef.io/delivery_cli.html)
kitchen documentation (https://docs.chef.io/kitchen.html)

What is a cookbook?

A cookbook is a collection of smaller building blocks that make up a useful, shareable piece of configuration.

In the words of the official Chef documentation:

->A cookbook defines a scenario and contains everything that is required to support that scenario.
->We’re going to learn about all of the smaller pieces that we’ll need to support a scenario as we continue through the course,
  but the first thing that we need is a cookbook to contain them.

Generating a Cookbook:-

The Chef Development Kit includes a generate command that we’ve already seen can be used to create a chef-repo,
but it can also be used to create the other types of structures that we’ll need to fully utilize Chef. That list includes cookbooks.
Let’s use chef generate to create a cookbook that will handle the scenario of installing and configuring NGINX.
All of our cookbooks are going to go in the cookbooks directory within our Chef repo and we’ll call this one bcf_nginx 
(For “Basic Chef Fluency”):

[workstation] ~/chef-repo $ chef --help
[workstation] ~/chef-repo $ chef generate --help
[workstation] ~/chef-repo $ chef generate cookbook cookbooks/bcf_nginx
Generating cookbook bcf_nginx
- Ensuring correct cookbook file content
- Ensuring delivery configuration
- Ensuring correct delivery build cookbook content

Your cookbook is ready. Type `cd cookbooks/bcf_nginx` to enter it.


There are several commands you can run to get started locally developing and testing your cookbook.
Type `delivery local --help` to see a full list.

Why not start by writing a test? Tests for the default recipe are stored at:

test/integration/default/default_test.rb

If you'd prefer to dive right in, the default recipe can be found at:

recipes/default.rb


Taking a look at this output we see some information about delivery, writing tests, and a default recipe. These are all topics that we’re going to cover as we continue on, but for right now we’re just going to worry about the structure of the cookbook that was generated. Let’s install the tree utility to our workstation and use it to get a high-level overview of what we’re working with:

[workstation chef-repo] $ sudo yum install -y tree
...
[workstation chef-repo] $ tree cookbooks/bcf_nginx/
cookbooks/bcf_nginx/
??? Berksfile
??? chefignore
??? .delivery
?   ??? build_cookbook
?   ?   ??? Berksfile
?   ?   ??? chefignore
?   ?   ??? data_bags
?   ?   ?   ??? keys
?   ?   ?       ??? delivery_builder_keys.json
?   ?   ??? .kitchen.yml
?   ?   ??? LICENSE
?   ?   ??? metadata.rb
?   ?   ??? README.md
?   ?   ??? recipes
?   ?   ?   ??? default.rb
?   ?   ?   ??? deploy.rb
?   ?   ?   ??? functional.rb
?   ?   ?   ??? lint.rb
?   ?   ?   ??? provision.rb
?   ?   ?   ??? publish.rb
?   ?   ?   ??? quality.rb
?   ?   ?   ??? security.rb
?   ?   ?   ??? smoke.rb
?   ?   ?   ??? syntax.rb
?   ?   ?   ??? unit.rb
?   ?   ??? secrets
?   ?   ?   ??? fakey-mcfakerton
?   ?   ??? test
?   ?       ??? fixtures
?   ?           ??? cookbooks
?   ?               ??? test
?   ?                   ??? metadata.rb
?   ?                   ??? recipes
?   ?                       ??? default.rb
?   ??? config.json
?   ??? project.toml
??? .kitchen.yml
??? LICENSE
??? metadata.rb
??? README.md
??? recipes
?   ??? default.rb
??? spec
?   ??? spec_helper.rb
?   ??? unit
?       ??? recipes
?           ??? default_spec.rb
??? test
    ??? integration
        ??? default
            ??? default_test.rb


Going through this list, here’s an overview of what each file is used for:

Berksfile - Configuration file used by Berkshelf, which is the package manager for Chef. This allows us to define cookbook dependencies.
chefignore - Specifies the files (can use patterns) that knife should ignore when uploading contents to the Chef Server.
.delivery - Directory holding configuration related to using delivery when working with Chef Automate.
.kitchen.yml - Configuration for kitchen to use for running integration tests.
LICENSE - The license that this cookbooks code should use.
metadata.rb - Includes information describing the cookbook itself. Information including compatible Chef versions, cookbook version number, name, email of maintainer, cookbook dependencies (Berkshelf uses this file also), and more.
README.md - Documentation for the cookbook as a whole that usually includes usage information.
recipes - Contains the cookbook recipes. Recipes are where the configuration happens in a cookbook.
spec - Directory that “unit” tests will go in. These tests don’t require an entire server to be spun up to test them.
test - Directory that higher level tests like “integration” tests will go in. These tests execute checks on a configured node.


In the next few lessons, we’ll look at more and more of the building blocks that we’ll use when working with Chef.


*****************************************************************************************************************************
[root@workstation ~]# cd generated-chef-repo
[root@workstation generated-chef-repo]# pwd
/root/generated-chef-repo
[root@workstation generated-chef-repo]# ls -al
total 32
drwxr-xr-x. 6 root root 4096 Dec 25 19:21 .
dr-xr-x---. 9 root root 4096 Dec 25 19:21 ..
-rw-r--r--. 1 root root 1176 Dec 25 19:21 chefignore
-rw-r--r--. 1 root root  275 Dec 25 19:21 .chef-repo.txt
drwxr-xr-x. 3 root root   36 Dec 25 19:21 cookbooks
drwxr-xr-x. 3 root root   36 Dec 25 19:21 data_bags
drwxr-xr-x. 7 root root 4096 Dec 25 19:21 .git
-rw-r--r--. 1 root root 2057 Dec 25 19:21 .gitignore
-rw-r--r--. 1 root root   70 Dec 25 19:21 LICENSE
drwxr-xr-x. 2 root root   22 Dec 25 19:21 policyfiles
-rw-r--r--. 1 root root 1338 Dec 25 19:21 README.md
[root@workstation generated-chef-repo]# knife configure
WARNING: No knife configuration file found. See https://docs.chef.io/config_rb_knife.html for details.
Please enter the chef server URL: [https://localhost/organizations/myorg] https://localhost/DjspysEduTechunts/Djspys
Please enter an existing username or clientname for the API: [centos] Djspys
*****

You must place your client key in:
  /root/.chef/Djspys.pem
Before running commands with Knife

*****
Knife configuration file written to /root/.chef/credentials
[root@workstation generated-chef-repo]# knife node list
WARN: Failed to read the private key /root/.chef/Djspys.pem: #<Errno::ENOENT: No such file or directory @ rb_sysopen - /root/.chef/Djspys.pem>
ERROR: Your private key could not be loaded from /root/.chef/Djspys.pem
Check your configuration file and ensure that your private key is readable
[root@workstation generated-chef-repo]# knife configure
Please enter the chef server URL: [https://localhost/organizations/myorg] https://localhost/DjspysEduTechunts/djspys
Please enter an existing username or clientname for the API: [centos] Djspys
Overwrite /root/.chef/credentials? (Y/N) Y
*****

You must place your client key in:
  /root/.chef/Djspys.pem
Before running commands with Knife

*****
Knife configuration file written to /root/.chef/credentials
[root@workstation generated-chef-repo]# knife node list
WARN: Failed to read the private key /root/.chef/Djspys.pem: #<Errno::ENOENT: No such file or directory @ rb_sysopen - /root/.chef/Djspys.pem>
ERROR: Your private key could not be loaded from /root/.chef/Djspys.pem
Check your configuration file and ensure that your private key is readable
[root@workstation generated-chef-repo]# knife configure
Please enter the chef server URL: [https://localhost/organizations/myorg] https://localhost/DjspysEduTechunts/djspys
Please enter an existing username or clientname for the API: [centos] djspys
Overwrite /root/.chef/credentials? (Y/N) Y
*****

You must place your client key in:
  /root/.chef/djspys.pem
Before running commands with Knife

*****
Knife configuration file written to /root/.chef/credentials
[root@workstation generated-chef-repo]# knife node list
WARN: Failed to read the private key /root/.chef/djspys.pem: #<Errno::ENOENT: No such file or directory @ rb_sysopen - /root/.chef/djspys.pem>
ERROR: Your private key could not be loaded from /root/.chef/djspys.pem
Check your configuration file and ensure that your private key is readable
[root@workstation generated-chef-repo]# ^C
[root@workstation generated-chef-repo]# knife configure initial
Please enter the chef server URL: [https://localhost/organizations/myorg] https://localhost/organizations/djspys
Please enter an existing username or clientname for the API: [centos] djspys
Overwrite /root/.chef/credentials? (Y/N) Y
*****

You must place your client key in:
  /root/.chef/djspys.pem
Before running commands with Knife

*****
Knife configuration file written to /root/.chef/credentials
[root@workstation generated-chef-repo]# knife node list
WARN: Failed to read the private key /root/.chef/djspys.pem: #<Errno::ENOENT: No such file or directory @ rb_sysopen - /root/.chef/djspys.pem>
ERROR: Your private key could not be loaded from /root/.chef/djspys.pem
Check your configuration file and ensure that your private key is readable
[root@workstation generated-chef-repo]# ^C
[root@workstation generated-chef-repo]# clear
[root@workstation generated-chef-repo]# cd ..
[root@workstation ~]# cd ..
[root@workstation /]# pwd
/
[root@workstation /]# clear
[root@workstation /]# ls
as4  bin  boot  dev  etc  home  lib  lib64  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var
[root@workstation /]# mkdir as5
[root@workstation /]# cd as5
[root@workstation as5]# ls
[root@workstation as5]# knife bootstrap --help
knife bootstrap [PROTOCOL://][USER@]FQDN (options)
        --bootstrap-curl-options OPTIONS
                                     Add options to curl when install Chef Infra Client.
        --bootstrap-install-command COMMANDS
                                     Custom command to install Chef Infra Client.
        --bootstrap-no-proxy [NO_PROXY_URL|NO_PROXY_IP]
                                     Do not proxy locations for the node being bootstrapped
        --bootstrap-preinstall-command COMMANDS
                                     Custom commands to run before installing Chef Infra Client.
        --bootstrap-proxy PROXY_URL  The proxy server for the node being bootstrapped.
        --bootstrap-proxy-pass PROXY_PASS
                                     The proxy authentication password for the node being bootstrapped.
        --bootstrap-proxy-user PROXY_USER
                                     The proxy authentication username for the node being bootstrapped.
    -t TEMPLATE,                     Bootstrap Chef Infra Client using a built-in or custom template. Set to the full path of an erb template or use one of the built-in templates.
        --bootstrap-template
        --bootstrap-url URL          URL to a custom installation script.
        --bootstrap-vault-file VAULT_FILE
                                     A JSON file with a list of vault(s) and item(s) to be updated.
        --bootstrap-vault-item VAULT_ITEM
                                     A single vault and item to update as "vault:item".
        --bootstrap-vault-json VAULT_JSON
                                     A JSON string with the vault(s) and item(s) to be updated.
        --bootstrap-version VERSION  The version of Chef Infra Client to install.
        --bootstrap-wget-options OPTIONS
                                     Add options to wget when installing Chef Infra Client.
    -f CA_TRUST_PATH,                The Certificate Authority (CA) trust file used for SSL transport.
        --ca-trust-file
        --channel CHANNEL            Install from the given channel. Default is 'stable'. (valid options: 'stable', 'current', or 'unstable')
        --chef-license ACCEPTANCE    Accept the license for this product and any contained products ('accept', 'accept-no-persist', or 'accept-silent')
    -N, --node-name NAME             The node name for your new node.
        --server-url URL             Chef Infra Server URL.
        --chef-zero-host HOST        Host to start Chef Infra Zero on.
        --chef-zero-port PORT        Port (or port range) to start Chef Infra Zero on. Port ranges like 1000,1010 or 8889-9999 will try all given ports until one works.
    -k, --key KEY                    Chef Infra Server API client key.
        --[no-]color                 Use colored output, defaults to enabled.
    -c, --config CONFIG              The configuration file to use.
        --config-option OPTION=VALUE Override a single configuration option.
    -P PASSWORD,                     Authenticate to the target host with this password.
        --connection-password
    -p, --connection-port PORT       The port on the target node to connect to.
    -o PROTOCOL,                     The protocol to use to connect to the target node. (valid options: 'ssh' or 'winrm')
        --connection-protocol
    -U, --connection-user USERNAME   Authenticate to the target host with this user account.
        --defaults                   Accept default values for all questions.
    -d, --disable-editing            Do not open EDITOR, just accept the data as is.
    -e, --editor EDITOR              Set the editor to use for interactive commands.
        --encrypt                    If 'secret' or 'secret_file' is present in your config, then encrypt data bags using it.
    -E, --environment ENVIRONMENT    Set the Chef Infra Client environment (except for in searches, where this will be flagrantly ignored).
        --[no-]fips                  Enable FIPS mode.
    -j JSON_ATTRIBS,                 A JSON string to be added to the first run of chef-client.
        --json-attributes
        --json-attribute-file FILE   A JSON file to be used to the first run of chef-client.
    -F, --format FORMAT              Which format to use for output. (valid options: 'summary', 'text', 'json', 'yaml', or 'pp')
        --hint HINT_NAME[=HINT_FILE] Specify an Ohai hint to be set on the bootstrap target. Use multiple --hint options to specify multiple hints.
    -R KERBEROS_REALM,               The Kerberos realm used for authentication.
        --kerberos-realm
    -S KERBEROS_SERVICE,             The Kerberos service used for authentication.
        --kerberos-service
        --[no-]listen                Whether a local mode (-z) server binds to a port.
    -z, --local-mode                 Point knife commands at local repository instead of Chef Infra Server.
    -W, --max-wait SECONDS           The maximum time to wait for the initial connection to be established.
    -m, --msi-url URL                Location of the Chef Infra Client MSI. The default templates will prefer to download from this location. The MSI will be downloaded from https://chef.io if not provided (Windows).
    -u, --user USER                  Chef Infra Server API client username.
        --node-ssl-verify-mode [peer|none]
                                     Whether or not to verify the SSL cert for all HTTPS requests.
        --[no-]node-verify-api-cert  Verify the SSL cert for HTTPS requests to the Chef Infra Server API.
        --policy-group POLICY_GROUP  Policy group name to use (--policy-name must also be given).
        --policy-name POLICY_NAME    Policyfile name to use (--policy-group must also be given).
        --sudo-preserve-home         Preserve non-root user HOME environment variable with sudo.
        --print-after                Show the data after a destructive operation.
        --profile PROFILE            The credentials profile to select.
    -r, --run-list RUN_LIST          Comma separated list of roles/recipes to apply.
    -s, --secret SECRET              The secret key to use to encrypt data bag item values. Can also be defaulted in your config with the key 'secret'.
        --secret-file SECRET_FILE    A file containing the secret key to use to encrypt data bag item values. Can also be defaulted in your config with the key 'secret_file'.
        --session-timeout SECONDS    The number of seconds to wait for each connection operation to be acknowledged while running bootstrap.
    -A, --ssh-forward-agent          Enable SSH agent forwarding.
    -G, --ssh-gateway GATEWAY        The SSH gateway.
        --ssh-gateway-identity SSH_GATEWAY_IDENTITY
                                     The SSH identity file used for gateway authentication.
    -i IDENTITY_FILE,                The SSH identity file used for authentication.
        --ssh-identity-file
        --ssh-verify-host-key VALUE  Verify host key. Default is 'always'. (valid options: 'always', 'accept_new', 'accept_new_or_local_tunnel', or 'never')
        --tags TAGS                  Comma separated list of tags to apply to the node.
        --sudo                       Execute the bootstrap via sudo.
        --use-sudo-password          Execute the bootstrap via sudo with password.
    -V, --verbose                    More verbose output. Use twice for max verbosity.
    -v, --version                    Show Chef Infra Client version.
    -w AUTH-METHOD,                  The WinRM authentication method to use. (valid options: 'plaintext', 'kerberos', 'ssl', or 'negotiate')
        --winrm-auth-method
        --winrm-basic-auth-only      For WinRM basic authentication when using the 'ssl' auth method.
        --winrm-no-verify-cert       Do not verify the SSL certificate of the target node for WinRM.
        --winrm-ssl                  Use SSL in the WinRM connection.
        --winrm-ssl-peer-fingerprint FINGERPRINT
                                     SSL certificate fingerprint expected from the target.
    -y, --yes                        Say yes to all prompts for confirmation.
        --forward-agent              This flag is deprecated. Use -A/--ssh-forward-agent instead.
    -h, --help                       Show this help message.
        --[no-]host-key-verify       This flag is deprecated. Use --ssh-verify-host-key instead.
        --prerelease                 This flag is deprecated. Use --channel instead.
        --ssh-password PASSWORD      This flag is deprecated. Use -P/--connection-password instead.
        --ssh-port PASSWORD          This flag is deprecated. Use -p/--connection-port instead.
        --ssh-user USERNAME          This flag is deprecated. Use -U/--connection-user instead.
        --ssl-peer-fingerprint FINGERPRINT
                                     This flag is deprecated. Use --winrm-ssl-peer-fingerprint instead.
        --winrm-authentication-protocol PROTOCOL
                                     This flag is deprecated. Use -w/--winrm-auth-method instead.
        --winrm-password PASSWORD    This flag is deprecated. Use -P/--connection-password instead.
        --winrm-port PORT            This flag is deprecated. Use -p/--connection-port instead.
        --winrm-session-timeout MINUTES
                                     This flag is deprecated. Use --session-timeout instead.
        --winrm-ssl-verify-mode MODE This flag is deprecated. Use --winrm-no-verify-cert instead.
        --winrm-transport TRANSPORT  This flag is deprecated. Use --winrm-ssl instead.
    -x, --winrm-user USERNAME        This flag is deprecated. Use -U/--connection-user instead.
[root@workstation as5]# ^C
[root@workstation as5]# clear
[root@workstation as5]# cd ..
[root@workstation /]# mkdir as9
[root@workstation /]# cd as9
[root@workstation as9]# ls
[root@workstation as9]# chef --help
Usage:
    chef -h/--help
    chef -v/--version
    chef command [arguments...] [options...]


Available Commands:
    exec                    Runs the command in context of the embedded ruby
    env                     Prints environment variables used by ChefDK
    gem                     Runs the `gem` command in context of the embedded Ruby
    generate                Generate a new repository, cookbook, or other component
    shell-init              Initialize your shell to use ChefDK as your primary Ruby
    install                 Install cookbooks from a Policyfile and generate a locked cookbook set
    update                  Updates a Policyfile.lock.json with latest run_list and cookbooks
    push                    Push a local policy lock to a policy group on the Chef Infra Server
    push-archive            Push a policy archive to a policy group on the Chef Infra Server
    show-policy             Show policyfile objects on the Chef Infra Server
    diff                    Generate an itemized diff of two Policyfile lock documents
    export                  Export a policy lock as a Chef Infra Zero code repo
    clean-policy-revisions  Delete unused policy revisions on the Chef Infra Server
    clean-policy-cookbooks  Delete unused policyfile cookbooks on the Chef Infra Server
    delete-policy-group     Delete a policy group on the Chef Infra Server
    delete-policy           Delete all revisions of a policy on the Chef Infra Server
    undelete                Undo a delete command
    describe-cookbook       Prints cookbook checksum information used for cookbook identifier
[root@workstation as9]# cd ..
[root@workstation /]# ls
as4  as5  as9  bin  boot  dev  etc  home  lib  lib64  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var
[root@workstation /]# mkdir chef-repo
[root@workstation /]# cd chef-repo
[root@workstation chef-repo]# pwd
/chef-repo
[root@workstation chef-repo]# chef --help
Usage:
    chef -h/--help
    chef -v/--version
    chef command [arguments...] [options...]


Available Commands:
    exec                    Runs the command in context of the embedded ruby
    env                     Prints environment variables used by ChefDK
    gem                     Runs the `gem` command in context of the embedded Ruby
    generate                Generate a new repository, cookbook, or other component
    shell-init              Initialize your shell to use ChefDK as your primary Ruby
    install                 Install cookbooks from a Policyfile and generate a locked cookbook set
    update                  Updates a Policyfile.lock.json with latest run_list and cookbooks
    push                    Push a local policy lock to a policy group on the Chef Infra Server
    push-archive            Push a policy archive to a policy group on the Chef Infra Server
    show-policy             Show policyfile objects on the Chef Infra Server
    diff                    Generate an itemized diff of two Policyfile lock documents
    export                  Export a policy lock as a Chef Infra Zero code repo
    clean-policy-revisions  Delete unused policy revisions on the Chef Infra Server
    clean-policy-cookbooks  Delete unused policyfile cookbooks on the Chef Infra Server
    delete-policy-group     Delete a policy group on the Chef Infra Server
    delete-policy           Delete all revisions of a policy on the Chef Infra Server
    undelete                Undo a delete command
    describe-cookbook       Prints cookbook checksum information used for cookbook identifier
[root@workstation chef-repo]# chef generate --help
Usage: chef generate GENERATOR [options]

Available generators:
  cookbook        Generate a single cookbook
  recipe          Generate a new recipe
  attribute       Generate an attributes file
  template        Generate a file template
  file            Generate a cookbook file
  helpers         Generate a cookbook helper file in libraries
  resource        Generate a custom resource
  repo            Generate a Chef Infra code repository
  policyfile      Generate a Policyfile for use with the install/push commands
  generator       Copy ChefDK's generator cookbook so you can customize it
  build-cookbook  Generate a build cookbook for use with Chef Workflow (Delivery)
        --chef-license ACCEPTANCE    Accept the license for this product and any contained products ('accept', 'accept-no-persist', or 'accept-silent')
    -h, --help                       Show this message
    -v, --version                    Show ChefDK version

[root@workstation chef-repo]# chef generate cookbook cookbooks/bcf_nginx
Generating cookbook bcf_nginx
- Ensuring correct cookbook content

================================================================================
Error executing action `create` on resource 'directory[/chef-repo/cookbooks/bcf_nginx]'
================================================================================

Chef::Exceptions::EnclosingDirectoryDoesNotExist
------------------------------------------------
Parent directory /chef-repo/cookbooks does not exist, cannot create /chef-repo/cookbooks/bcf_nginx

Resource Declaration:
---------------------
# In /opt/chefdk/embedded/lib/ruby/gems/2.6.0/gems/chef-dk-4.6.35/lib/chef-dk/skeletons/code_generator/recipes/cookbook.rb

  9: directory cookbook_dir
 10:

Compiled Resource:
------------------
# Declared in /opt/chefdk/embedded/lib/ruby/gems/2.6.0/gems/chef-dk-4.6.35/lib/chef-dk/skeletons/code_generator/recipes/cookbook.rb:9:in `from_file'

directory("/chef-repo/cookbooks/bcf_nginx") do
  action [:create]
  default_guard_interpreter :default
  declared_type :directory
  cookbook_name :code_generator
  recipe_name "cookbook"
  path "/chef-repo/cookbooks/bcf_nginx"
  owner nil
  group nil
  mode nil
end

System Info:
------------
chef_version=15.5.17
ruby=ruby 2.6.5p114 (2019-10-01 revision 67812) [x86_64-linux]
program_name=/opt/chefdk/bin/chef
executable=/opt/chefdk/bin/chef

ERROR: Chef Infra failed to converge: directory[/chef-repo/cookbooks/bcf_nginx] (code_generator::cookbook line 9) had an error: Chef::Exceptions::EnclosingDirectoryDoesNotExist: Parent directory /chef-repo/cookbooks does not exist, cannot create /chef-repo/cookbooks/bcf_nginx from file /opt/chefdk/embedded/lib/ruby/gems/2.6.0/gems/chef-15.5.17/lib/chef/mixin/why_run.rb:238:in `run'
Caused by: (Chef::Exceptions::EnclosingDirectoryDoesNotExist) directory[/chef-repo/cookbooks/bcf_nginx] (code_generator::cookbook line 9) had an error: Chef::Exceptions::EnclosingDirectoryDoesNotExist: Parent directory /chef-repo/cookbooks does not exist, cannot create /chef-repo/cookbooks/bcf_nginx
[root@workstation chef-repo]# cat cookbook.rb
cat: cookbook.rb: No such file or directory
[root@workstation chef-repo]# chef generate cookbook cookbooks/bcf_nginx
Generating cookbook bcf_nginx
- Ensuring correct cookbook content

================================================================================
Error executing action `create` on resource 'directory[/chef-repo/cookbooks/bcf_nginx]'
================================================================================

Chef::Exceptions::EnclosingDirectoryDoesNotExist
------------------------------------------------
Parent directory /chef-repo/cookbooks does not exist, cannot create /chef-repo/cookbooks/bcf_nginx

Resource Declaration:
---------------------
# In /opt/chefdk/embedded/lib/ruby/gems/2.6.0/gems/chef-dk-4.6.35/lib/chef-dk/skeletons/code_generator/recipes/cookbook.rb

  9: directory cookbook_dir
 10:

Compiled Resource:
------------------
# Declared in /opt/chefdk/embedded/lib/ruby/gems/2.6.0/gems/chef-dk-4.6.35/lib/chef-dk/skeletons/code_generator/recipes/cookbook.rb:9:in `from_file'

directory("/chef-repo/cookbooks/bcf_nginx") do
  action [:create]
  default_guard_interpreter :default
  declared_type :directory
  cookbook_name :code_generator
  recipe_name "cookbook"
  path "/chef-repo/cookbooks/bcf_nginx"
  owner nil
  group nil
  mode nil
end

System Info:
------------
chef_version=15.5.17
ruby=ruby 2.6.5p114 (2019-10-01 revision 67812) [x86_64-linux]
program_name=/opt/chefdk/bin/chef
executable=/opt/chefdk/bin/chef

ERROR: Chef Infra failed to converge: directory[/chef-repo/cookbooks/bcf_nginx] (code_generator::cookbook line 9) had an error: Chef::Exceptions::EnclosingDirectoryDoesNotExist: Parent directory /chef-repo/cookbooks does not exist, cannot create /chef-repo/cookbooks/bcf_nginx from file /opt/chefdk/embedded/lib/ruby/gems/2.6.0/gems/chef-15.5.17/lib/chef/mixin/why_run.rb:238:in `run'
Caused by: (Chef::Exceptions::EnclosingDirectoryDoesNotExist) directory[/chef-repo/cookbooks/bcf_nginx] (code_generator::cookbook line 9) had an error: Chef::Exceptions::EnclosingDirectoryDoesNotExist: Parent directory /chef-repo/cookbooks does not exist, cannot create /chef-repo/cookbooks/bcf_nginx
[root@workstation chef-repo]# ls
[root@workstation chef-repo]# mkdir cookbooks
[root@workstation chef-repo]# cd cookbooks
[root@workstation cookbooks]# ls
[root@workstation cookbooks]# touch bcf_nginx.rb
[root@workstation cookbooks]# cd ..
[root@workstation chef-repo]# chef generate cookbook cookbooks/bcf_nginx
Generating cookbook bcf_nginx
- Ensuring correct cookbook content
- Committing cookbook files to git

Your cookbook is ready. Type `cd cookbooks/bcf_nginx` to enter it.

There are several commands you can run to get started locally developing and testing your cookbook.
Type `delivery local --help` to see a full list of local testing commands.

Why not start by writing an InSpec test? Tests for the default recipe are stored at:

test/integration/default/default_test.rb

If you'd prefer to dive right in, the default recipe can be found at:

recipes/default.rb

[root@workstation chef-repo]# sudo yum install -y tree
Loaded plugins: fastestmirror
Loading mirror speeds from cached hostfile
 * base: mirrors.advancedhosters.com
 * epel: iad.mirror.rackspace.com
 * extras: mirrors.advancedhosters.com
 * updates: mirrors.advancedhosters.com
Resolving Dependencies
--> Running transaction check
---> Package tree.x86_64 0:1.6.0-10.el7 will be installed
--> Finished Dependency Resolution

Dependencies Resolved

=============================================================================================================================================================
 Package                            Arch                                 Version                                    Repository                          Size
=============================================================================================================================================================
Installing:
 tree                               x86_64                               1.6.0-10.el7                               base                                46 k

Transaction Summary
=============================================================================================================================================================
Install  1 Package

Total download size: 46 k
Installed size: 87 k
Downloading packages:
tree-1.6.0-10.el7.x86_64.rpm                                                                                                          |  46 kB  00:00:00
Running transaction check
Running transaction test
Transaction test succeeded
Running transaction
Warning: RPMDB altered outside of yum.
  Installing : tree-1.6.0-10.el7.x86_64                                                                                                                  1/1
  Verifying  : tree-1.6.0-10.el7.x86_64                                                                                                                  1/1

Installed:
  tree.x86_64 0:1.6.0-10.el7

Complete!
[root@workstation chef-repo]# tree cookbooks/bcf_nginx/
cookbooks/bcf_nginx/
+-- CHANGELOG.md
+-- chefignore
+-- kitchen.yml
+-- LICENSE
+-- metadata.rb
+-- Policyfile.rb
+-- README.md
+-- recipes
¦   +-- default.rb
+-- spec
¦   +-- spec_helper.rb
¦   +-- unit
¦       +-- recipes
¦           +-- default_spec.rb
+-- test
    +-- integration
        +-- default
            +-- default_test.rb

7 directories, 11 files
[root@workstation chef-repo]#
